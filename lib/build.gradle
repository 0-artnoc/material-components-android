apply plugin: 'com.android.library'

archivesBaseName = 'design'


dependencies {
  compile "com.android.support:appcompat-v7:${project.rootProject.ext.supportVersion}"
  compile "com.android.support:recyclerview-v7:${project.rootProject.ext.supportVersion}"
  compile "com.android.support:support-core-utils:${project.rootProject.ext.supportVersion}"
  compile "com.android.support:support-fragment:${project.rootProject.ext.supportVersion}"
  compile "com.android.support:transition:${project.rootProject.ext.supportVersion}"

  compile project(getTransformedProjectPath(
      'lib/src/android/support/design/animation'))
  compile project(getTransformedProjectPath(
      'lib/src/android/support/design/circularreveal/cardview'))
  compile project(getTransformedProjectPath(
      'lib/src/android/support/design/stateful'))

  testCompile("com.android.support.test:runner:${project.rootProject.ext.testRunnerVersion}") {
    exclude module: 'support-annotations'
  }
  testCompile "junit:junit:4.12"
  testCompile "com.google.truth:truth:0.35"
  testCompile "org.mockito:mockito-core:1.9.5"
  testCompile "org.robolectric:robolectric:3.3.2"
}

android {
  sourceSets {
    main.manifest.srcFile 'AndroidManifest.xml'
    main.java.srcDir 'src'
    main.java.includes = [
      'android/support/design/internal/*.java',
      'android/support/design/widget/**/*.java',
    ]
    main.res.srcDirs = [
      'res',
      'res-public'
    ]
    main.assets.srcDir 'assets'
    main.resources.srcDir 'src'

    test.java.srcDir 'jvmtests/javatests'
  }
  
  buildTypes.all {
    consumerProguardFiles 'proguard-rules.pro'
  }
}

android.libraryVariants.all { variant ->
  def name = variant.buildType.name

  if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
    return; // Skip debug builds.
  }
  def suffix = name.capitalize()

  def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar) {
    dependsOn variant.javaCompile
    from variant.javaCompile.destinationDir
    from 'LICENSE.txt'
  }
  def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
    source android.sourceSets.main.java
    classpath = files(variant.javaCompile.classpath.files) + files(
      "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
  }

  def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  artifacts.add('archives', javadocJarTask);
  artifacts.add('archives', sourcesJarTask);
}
