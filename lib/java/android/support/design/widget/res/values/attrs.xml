<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2015 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
-->
<resources>

  <declare-styleable name="NavigationView">
    <attr name="android:background"/>
    <attr name="android:fitsSystemWindows"/>
    <attr name="android:maxWidth"/>
    <attr name="elevation"/>
    <!-- The menu resource to inflate and populate items from. -->
    <attr name="menu" format="reference"/>
    <attr name="itemIconTint" format="color"/>
    <attr name="itemTextColor" format="color"/>
    <attr name="itemBackground" format="reference"/>
    <attr name="itemTextAppearance" format="reference"/>
    <!-- Layout resource to inflate as the header -->
    <attr name="headerLayout" format="reference"/>
  </declare-styleable>

  <declare-styleable name="TabLayout">
    <!-- Color of the indicator used to show the currently selected tab. -->
    <attr name="tabIndicatorColor" format="color"/>
    <!-- {@deprecated Instead, set the intrinsic size of the custom drawable provided to the
         tabIndicator attribute in order to change the indicator height. For example, this can be
         done by setting the <size> property in a <shape> resource.} -->
    <attr name="tabIndicatorHeight" format="dimension"/>
    <!-- Position in the Y axis from the starting edge that tabs should be positioned from. -->
    <attr name="tabContentStart" format="dimension"/>
    <!-- Reference to a background to be applied to tabs. -->
    <attr name="tabBackground" format="reference"/>
    <!-- Reference to a drawable to use as selection indicator for tabs. If this attribute is not
         specified, indicator defaults to a line along the bottom of the tab. -->
    <attr name="tabIndicator" format="reference"/>
    <!-- Gravity constant for tab selection indicator. -->
    <attr name="tabIndicatorGravity">
      <!-- Align indicator to the bottom of this tab layout. -->
      <enum name="bottom" value="0"/>
      <!-- Align indicator along the center of this tab layout. -->
      <enum name="center" value="1"/>
      <!-- Align indicator to the top of this tab layout. -->
      <enum name="top" value="2"/>
      <!-- Stretch indicator to match the height and width of a tab item in this layout. -->
      <enum name="stretch" value="3"/>
    </attr>
    <!-- Whether the selection indicator width should fill the full width of the tab item,
         or if it should be fitted to the content of the tab text label. If no text label is
         present, it will be set to the width of the icon or to a minimum width of 24dp. -->
    <attr name="tabIndicatorFullWidth" format="boolean"/>
    <!-- The behavior mode for the Tabs in this layout -->
    <attr name="tabMode">
      <enum name="scrollable" value="0"/>
      <enum name="fixed" value="1"/>
    </attr>
    <!-- Gravity constant for tabs. -->
    <attr name="tabGravity">
      <enum name="fill" value="0"/>
      <enum name="center" value="1"/>
    </attr>
    <!-- Whether to display tab labels horizontally inline with icons, or underneath icons. -->
    <attr name="tabInlineLabel" format="boolean"/>
    <!-- The minimum width for tabs. -->
    <attr name="tabMinWidth" format="dimension"/>
    <!-- The maximum width for tabs. -->
    <attr name="tabMaxWidth" format="dimension"/>
    <!-- A reference to a TextAppearance style to be applied to tabs. -->
    <attr name="tabTextAppearance" format="reference"/>
    <!-- The default text color to be applied to tabs. -->
    <attr name="tabTextColor" format="color"/>
    <!-- {@deprecated Instead, provide a ColorStateList to the tabTextColor attribute with a
         selected color set.}  -->
    <attr name="tabSelectedTextColor" format="color"/>
    <!-- The preferred padding along the start edge of tabs. -->
    <attr name="tabPaddingStart" format="dimension"/>
    <!-- The preferred padding along the top edge of tabs. -->
    <attr name="tabPaddingTop" format="dimension"/>
    <!-- The preferred padding along the end edge of tabs. -->
    <attr name="tabPaddingEnd" format="dimension"/>
    <!-- The preferred padding along the bottom edge of tabs. -->
    <attr name="tabPaddingBottom" format="dimension"/>
    <!-- The preferred padding along all edges of tabs. -->
    <attr name="tabPadding" format="dimension"/>
    <!-- Tint to apply to tab icons, if present. This can be a color state list or a color. -->
    <attr name="tabIconTint" format="color"/>
    <!-- Blending mode to apply to tab icons. -->
    <attr name="tabIconTintMode">
      <enum name="src_over" value="3"/>
      <enum name="src_in" value="5"/>
      <enum name="src_atop" value="9"/>
      <enum name="multiply" value="14"/>
      <enum name="screen" value="15"/>
      <enum name="add" value="16"/>
    </attr>
    <!-- Ripple color for the tabs. This may be a color state list, if the desired ripple color
         should be stateful.-->
    <attr name="tabRippleColor" format="color"/>
    <!-- Whether to use unbounded ripple effect for tabs, or if ripple should instead be bound to
         tab item bounds. -->
    <attr name="tabUnboundedRipple" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="TabItem">
    <!-- Text to display in the tab. -->
    <attr name="android:text"/>
    <!-- Icon to display in the tab. -->
    <attr name="android:icon"/>
    <!-- A reference to a layout resource to be displayed in the tab. -->
    <attr name="android:layout"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayout">
    <!-- Deprecated. Elevation is now controlled via a state list animator. -->
    <attr name="elevation"/>
    <attr name="android:background"/>
    <!-- The initial expanded state for the AppBarLayout. This only takes effect when this
         view is a direct child of a CoordinatorLayout. -->
    <attr name="expanded" format="boolean"/>
    <attr name="android:keyboardNavigationCluster"/>
    <attr name="android:touchscreenBlocksFocus"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayoutStates">
    <!-- State value for {@link android.support.design.widget.AppBarLayout} set when the view
         has been collapsed. -->
    <attr name="state_collapsed" format="boolean"/>
    <!-- State value for {@link android.support.design.widget.AppBarLayout} set when the view
         has children which are capable of being collapsed. -->
    <attr name="state_collapsible" format="boolean"/>
  </declare-styleable>

  <declare-styleable name="AppBarLayout_Layout">
    <attr name="layout_scrollFlags">
      <!-- The view will be scroll in direct relation to scroll events. This flag needs to be
           set for any of the other flags to take effect. If any sibling views
           before this one do not have this flag, then this value has no effect. -->
      <flag name="scroll" value="0x1"/>

      <!-- When exiting (scrolling off screen) the view will be scrolled until it is
           'collapsed'. The collapsed height is defined by the view's minimum height. -->
      <flag name="exitUntilCollapsed" value="0x2"/>

      <!-- When entering (scrolling on screen) the view will scroll on any downwards
           scroll event, regardless of whether the scrolling view is also scrolling. This
           is commonly referred to as the 'quick return' pattern. -->
      <flag name="enterAlways" value="0x4"/>

      <!-- An additional flag for 'enterAlways' which modifies the returning view to
           only initially scroll back to it's collapsed height. Once the scrolling view has
           reached the end of it's scroll range, the remainder of this view will be scrolled
           into view. -->
      <flag name="enterAlwaysCollapsed" value="0x8"/>

      <!-- Upon a scroll ending, if the view is only partially visible then it will be
           snapped and scrolled to it's closest edge. -->
      <flag name="snap" value="0x10"/>
    </attr>

    <!-- An interpolator to use when scrolling this View. Only takes effect when View
         is scrollable. -->
    <attr name="layout_scrollInterpolator" format="reference"/>
  </declare-styleable>

  <declare-styleable name="ScrollingViewBehavior_Layout">
    <!-- The amount that the scrolling view should overlap the bottom of any AppBarLayout -->
    <attr name="behavior_overlapTop" format="dimension"/>
  </declare-styleable>

  <declare-styleable name="CollapsingToolbarLayout">
    <!--  Specifies extra space on the start, top, end and bottom
          sides of the the expanded title text. Margin values should be positive. -->
    <attr name="expandedTitleMargin" format="dimension"/>
    <!--  Specifies extra space on the start side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginStart" format="dimension"/>
    <!--  Specifies extra space on the top side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginTop" format="dimension"/>
    <!--  Specifies extra space on the end side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginEnd" format="dimension"/>
    <!--  Specifies extra space on the bottom side of the the expanded title text.
          Margin values should be positive. -->
    <attr name="expandedTitleMarginBottom" format="dimension"/>
    <!-- The text appearance of the CollapsingToolbarLayout's title when it is fully
         'expanded' -->
    <attr name="expandedTitleTextAppearance" format="reference"/>
    <!-- The text appearance of the CollapsingToolbarLayouts title when it is fully
         'collapsed' -->
    <attr name="collapsedTitleTextAppearance" format="reference"/>
    <!-- The drawable to use as a scrim on top of the CollapsingToolbarLayouts content when
         it has been scrolled sufficiently off screen. -->
    <attr name="contentScrim" format="color"/>
    <!-- The drawable to use as a scrim for the status bar content when the
         CollapsingToolbarLayout has been scrolled sufficiently off screen. Only works on
         Lollipop with the correct setup. -->
    <attr name="statusBarScrim" format="color"/>
    <!-- The id of the primary Toolbar child that you wish to use for the purpose of collapsing.
         This Toolbar descendant view does not need to be a direct child of the layout.
         If you do not set this, the first direct Toolbar child found will be used. -->
    <attr name="toolbarId" format="reference"/>
    <!-- Specifies the amount of visible height in pixels used to define when to trigger a
         scrim visibility change. -->
    <attr name="scrimVisibleHeightTrigger" format="dimension"/>
    <!-- Specifies the duration used for scrim visibility animations. -->
    <attr name="scrimAnimationDuration" format="integer"/>

    <!-- Specifies how the title should be positioned when collapsed. -->
    <attr name="collapsedTitleGravity">
      <!-- Push title to the top of its container, not changing its size. -->
      <flag name="top" value="0x30"/>
      <!-- Push title to the bottom of its container, not changing its size. -->
      <flag name="bottom" value="0x50"/>
      <!-- Push title to the left of its container, not changing its size. -->
      <flag name="left" value="0x03"/>
      <!-- Push title to the right of its container, not changing its size. -->
      <flag name="right" value="0x05"/>
      <!-- Place title in the vertical center of its container, not changing its size. -->
      <flag name="center_vertical" value="0x10"/>
      <!-- Grow the vertical size of the title if needed so it completely fills its container. -->
      <flag name="fill_vertical" value="0x70"/>
      <!-- Place title in the horizontal center of its container, not changing its size. -->
      <flag name="center_horizontal" value="0x01"/>
      <!-- Place the title in the center of its container in both the vertical and horizontal axis, not changing its size. -->
      <flag name="center" value="0x11"/>
      <!-- Push title to the beginning of its container, not changing its size. -->
      <flag name="start" value="0x00800003"/>
      <!-- Push title to the end of its container, not changing its size. -->
      <flag name="end" value="0x00800005"/>
    </attr>

    <!-- Specifies how the title should be positioned when expanded. -->
    <attr name="expandedTitleGravity">
      <!-- Push title to the top of its container, not changing its size. -->
      <flag name="top" value="0x30"/>
      <!-- Push title to the bottom of its container, not changing its size. -->
      <flag name="bottom" value="0x50"/>
      <!-- Push title to the left of its container, not changing its size. -->
      <flag name="left" value="0x03"/>
      <!-- Push title to the right of its container, not changing its size. -->
      <flag name="right" value="0x05"/>
      <!-- Place title in the vertical center of its container, not changing its size. -->
      <flag name="center_vertical" value="0x10"/>
      <!-- Grow the vertical size of the title if needed so it completely fills its container. -->
      <flag name="fill_vertical" value="0x70"/>
      <!-- Place title in the horizontal center of its container, not changing its size. -->
      <flag name="center_horizontal" value="0x01"/>
      <!-- Place the title in the center of its container in both the vertical and horizontal axis, not changing its size. -->
      <flag name="center" value="0x11"/>
      <!-- Push title to the beginning of its container, not changing its size. -->
      <flag name="start" value="0x00800003"/>
      <!-- Push title to the end of its container, not changing its size. -->
      <flag name="end" value="0x00800005"/>
    </attr>

    <!-- Whether the CollapsingToolbarLayout should draw its own shrinking/growing title. -->
    <attr name="titleEnabled" format="boolean"/>
    <!-- The title to show when titleEnabled is set to true. -->
    <attr name="title"/>
  </declare-styleable>

  <declare-styleable name="CollapsingToolbarLayout_Layout">
    <attr name="layout_collapseMode">
      <!-- The view will act as normal with no collapsing behavior. -->
      <enum name="none" value="0"/>
      <!-- The view will pin in place. -->
      <enum name="pin" value="1"/>
      <!-- The view will scroll in a parallax fashion. See the
           layout_collapseParallaxMultiplier attribute to change the multiplier. -->
      <enum name="parallax" value="2"/>
    </attr>

    <!-- The multiplier used when layout_collapseMode is set to 'parallax'. The value should
         be between 0.0 and 1.0. -->
    <attr name="layout_collapseParallaxMultiplier" format="float"/>
  </declare-styleable>

</resources>
